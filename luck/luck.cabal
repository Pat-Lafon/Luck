name:                luck
version:             0.1.0.0

synopsis:            A Language For Random Generators

-- A longer description of the package.
description: Luck is a domain specific language, which aims to make property-based random generators easier
             to write, read, and maintain.
             Target properties can be expressed in Luck as Boolean predicates, which are used to effectively
             direct the test generation of values by employing a combination of targeted bounded narrowing
             and constraint solving.
             The predicates can be decorated with lightweight annotations
             that allow controlling both the distribution of generated values and
             the amount of constraint solving that happens before each variable is instantiated. 

-- URL for the project homepage or repository.
homepage:            www.seas.upenn.edu/~llamp

-- The license under which the package is released.
license:             MIT
license-file:        LICENSE

author:              Leonidas Lampropoulos

maintainer:          llamp@seas.upenn.edu

-- A copyright notice.
-- copyright:           

category:            Testing
build-type:          Simple

-- Extra files to be distributed with the package, such as examples or a 
-- README.
-- extra-source-files:  

cabal-version:       >=1.10

data-files: src/Luck/Prelude.luck                                

library
  hs-source-dirs:      src
  build-depends:       base >=4.7 && <5.0, pretty >=1.1 && <1.2, cmdargs, word8,
                       utf8-string, bytestring, mtl >= 2.2.1, array,
                       containers, QuickCheck >= 2.7, random, MonadRandom >= 0.5,
                       rosezipper >= 0.1, lens >= 4.9.1, template-haskell, 
                       transformers, filepath
  build-tool-depends:  happy:happy, alex:alex

  other-modules:       Paths_luck

-- Do all of these really need to be exposed? Main is probably enough for the mkGenQ's in the future
  exposed-modules:     Common.Error, Common.SrcLoc, Common.Types,
                       Common.Util, Common.Pretty, Common.Conversions

                       Outer.AST, Outer.Parser, Outer.Types,
                       Outer.Lexer, Outer.ParseMonad, Outer.Renamer,
                       Outer.Expander, Outer.ClassMono

                       Core.AST, Core.IntRep, Core.CSet,
                       Core.Semantics, Core.Pretty, Core.Optimizations
                       Core.Rigidify
                       Core.Rigidify.Generator
                       Core.Rigidify.Pretty
                       Core.Rigidify.Data

                       Luck.Main
                       Luck.Template

  GHC-options:         -O2 -fwarn-tabs 
--  GHC-options:         -O2 -fwarn-tabs -fwarn-incomplete-patterns 
--  ghc-prof-options:    -fprof-auto
  default-language:    Haskell2010

executable luck
  main-is:             Main.hs
  build-depends:       base >=4.8 && <5.0, luck
--  GHC-options:         -O2 -prof
--  ghc-prof-options:    -fprof-auto
  GHC-options:         -O2 -rtsopts
  hs-source-dirs:      exec
  default-language:    Haskell2010
