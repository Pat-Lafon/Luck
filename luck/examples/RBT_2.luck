-- BEGIN inductives HERE
data Color = Red | Black
data RBT a = Leaf | Node Color a (RBT a) (RBT a)
-- END inductives HERE

-- BEGIN isRBT HERE
sig isRBT' :: Int -> Color -> RBT Int -> Bool
fun isRBT' h c t =
  if h == 0 then
      case (c, t) of
        | (_, Leaf) -> True
        | (Black, Node Red x Leaf Leaf) -> True
        | _ -> False
      end
  else case (c, t) of
         | (Red, Node Black x l r) ->
               isRBT' (h-1) Black l
              && isRBT' (h-1) Black r
         | (Black, Node Red x l r) ->
               isRBT' h Red l
              && isRBT' h Red r
         | (Black, Node Black x l r) ->
               isRBT' (h-1)  Black l
              && isRBT' (h-1) Black r
         | _ -> False
       end
-- END isRBT HERE

-- | This leads to h height!
sig isRBT :: RBT Int -> Bool
fun isRBT t = isRBT' 2 Red t